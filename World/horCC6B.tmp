[gd_scene load_steps=53 format=3 uid="uid://du45vw8vcspc0"]

[ext_resource type="Texture2D" uid="uid://bmb1vrwg57nmj" path="res://sprites/New/Horses/No_Equipment/Black/Horse_fullcolor_black.png" id="1_kxudm"]
[ext_resource type="Script" path="res://State Machine/state_machine.gd" id="2_pf214"]
[ext_resource type="Script" path="res://State Machine/States/idle.gd" id="3_y8s3n"]
[ext_resource type="Script" path="res://World/MovimientoAiPrueba.gd" id="4_q8ln5"]
[ext_resource type="Script" path="res://State Machine/States/walk.gd" id="4_ypgp0"]
[ext_resource type="Script" path="res://State Machine/States/run.gd" id="5_2ue6p"]

[sub_resource type="GDScript" id="GDScript_fhyc0"]
script/source = "@tool
@icon(\"./animated_shape_2d.svg\")
extends Node
class_name AnimatedShape2D
#class_name AnimatedCollisionShape2D
#class_name AnimatedSprite2DCollisions
#class_name CollisionShape2DFramer

## Customizes a CollisionShape2D for each frame of an AnimatedSprite2D.

# Usage:
# 1. Add this node anywhere in your scene
# 2. Target an input AnimatedSprite2D
# 3. Target an output CollisionShape2D
# 4. Load or Create a ShapeFrames2D (it's our database)
# 
# Notes:
# - You can put this pretty much anywhere you want in your scene.
# - This _could_ be a script on a CollisionShape2D, but this way your are free
#   to have your own script on your collision shape if you want to.
# - This is quite experimental ; contributions are welcome.
#   https://github.com/Goutte/godot-addon-animated-shape-2d

## Animated sprite we're going to watch to figure out which shape we want.
## We're reading the animation name and frame from it.
@export var animated_sprite: AnimatedSprite2D

## Target collision shape whose shape we're going to write to.
## We're also going to configure this CollisionShape2D (position, disabled)
## for each frame of the AnimatedSprite2D above.
@export var collision_shape: CollisionShape2D

## Shape data for each animation and frame of the animated sprite.
## This holds enough data to configure the collision shape for each frame
## of the animated sprite: shape, position, disabledâ€¦
@export var shape_frames: ShapeFrames2D

## If [code]true[/code], use the initial shape in the target CollisionShape2D
## as fallback when the shape is not defined in the ShapeFrames2D.
## If [code]false[/code], do not use fallback and therefore disable the shape.
## This has lower priority than use_previous_as_fallback.
@export var use_initial_as_fallback := true

## If [code]true[/code], use the previous shape in the target CollisionShape2D
## as fallback when the shape is not defined in the ShapeFrames2D.
## If [code]false[/code], do not use fallback and therefore disable the shape.
## This has higher priority than use_initial_as_fallback.
## This is handy if for example all your frames use the same shape,
## and shapes only change per animation.
@export var use_previous_as_fallback := false

## If [code]true[/code], use call_deferred() to set CollisionShape2D properties.
@export var use_deferred_calls := true

## Flip horizontally the collision shapes when the animated sprite is flipped,
## by inverting the scale of their parent Area2D.  Only works on collision
## shapes that are children of Area2D, to avoid weird behaviors with physics.
@export var handle_flip_h := true

## Maximum amount of shape size and position change per physics frame.
## Only used in the [code]INTERPOLATE[/code] mode.
@export var interpolation_step := 3.0


enum SHAPE_UPDATE_MODE {
	## Update the existing shape resource properties in the CollisionShape2D,
	## but only if shape types are compatible.
	UPDATE,
	## Works like [code]UPDATE[/code], but interpolates values instead of setting them.
	## This helps when sudden, big changes in a collision shape make the physics
	## engine glitch and your character starts clipping through the environment.
	## Use with [code]interpolation_step[/code].
	INTERPOLATE,
	## Always replace the existing shape resource in the CollisionShape2D.
	## This may trigger additional [code]entered[/code] signals.
	REPLACE,
}

## How the Shape2D resource of the CollisionShape2D is updated between frames.
## Weird things will happen if you change this at runtime.
@export var update_shape_mode := SHAPE_UPDATE_MODE.UPDATE


var fallback_shape: Shape2D
var fallback_position: Vector2
var fallback_disabled: bool
var initial_scale: Vector2
var collision_shape_parent: Node2D

var is_tweening_collision_shape_position := false
var target_collision_shape_position := Vector2.ZERO
var is_tweening_collision_shape_shape := false
var target_collision_shape_shape: Shape2D


func _ready():
	if not Engine.is_editor_hint():
		setup()
		update_shape()
	else:
		set_physics_process(false)


func _physics_process(_delta: float):
	if self.is_tweening_collision_shape_position:
		tween_collision_shape_position()
	if self.is_tweening_collision_shape_shape:
		tween_collision_shape_shape()


func _get_configuration_warnings() -> PackedStringArray:
	var warnings := PackedStringArray()
	if self.animated_sprite == null:
		warnings.append(\"This node requires a target AnimatedSprite2D to read frames from.\")
	if self.collision_shape == null:
		warnings.append(\"This node requires a target CollisionShape2D to write customizations to.\")
	if self.shape_frames == null:
		warnings.append(\"This node requires a ShapeFrames2D to store data.  Make a new one?\")
	return warnings


func setup():
	if self.collision_shape == null:
		return
	if self.shape_frames == null:
		return
	
	# We might update the original collision shape's shape, so we duplicate
	if self.collision_shape.shape:
		self.fallback_shape = self.collision_shape.shape.duplicate(true)
	self.fallback_position = self.collision_shape.position
	self.fallback_disabled = self.collision_shape.disabled
	self.collision_shape_parent = self.collision_shape.get_parent()
	if self.collision_shape_parent != null:
		self.initial_scale = self.collision_shape_parent.scale
	
	self.animated_sprite.animation_changed.connect(update_shape)
	self.animated_sprite.frame_changed.connect(update_shape)
	
	set_physics_process(self.update_shape_mode == SHAPE_UPDATE_MODE.INTERPOLATE)


func get_current_shape_frame() -> ShapeFrame2D:
	var animation_name := self.animated_sprite.get_animation()
	var frame := self.animated_sprite.get_frame()
	return self.shape_frames.get_shape_frame(animation_name, frame)


func update_shape():
	if self.shape_frames == null:
		return
	var shape_frame := get_current_shape_frame()
	
	var shape: Shape2D = null
	if shape_frame != null:
		shape = shape_frame.get_shape()
	var position := Vector2.ZERO
	var disabled := false
	if shape_frame != null:
		position = shape_frame.position
		disabled = shape_frame.disabled
	if shape == null and self.use_previous_as_fallback:
		# Improvement idea: allow flipping in this case as well
		return
	if shape == null and self.use_initial_as_fallback:
		shape = self.fallback_shape
		position = self.fallback_position
		disabled = self.fallback_disabled
	
	update_collision_shape_shape(shape)
	update_collision_shape_position(position)
	update_collision_shape_disabled(disabled)
	
	if self.handle_flip_h and is_collision_shape_parent_flippable():
		# Improvement idea: flip the CollisionBody2D itself and mirror its x pos
		if self.animated_sprite.flip_h:
			self.collision_shape_parent.scale.x = -self.initial_scale.x
		else:
			self.collision_shape_parent.scale.x = self.initial_scale.x


func update_collision_shape_disabled(disabled: bool):
	if self.use_deferred_calls:
		self.collision_shape.set_deferred(&\"disabled\", disabled)
	else:
		self.collision_shape.disabled = disabled


func update_collision_shape_position(new_position: Vector2):
	if new_position == self.collision_shape.position:
		return
	
	if self.update_shape_mode == SHAPE_UPDATE_MODE.INTERPOLATE:
		self.is_tweening_collision_shape_position = true
		self.target_collision_shape_position = new_position
	else:
		self.collision_shape.position = new_position


func update_collision_shape_shape(new_shape: Shape2D):
	if new_shape == self.collision_shape.shape:
		return
	
	if (
		self.update_shape_mode == SHAPE_UPDATE_MODE.INTERPOLATE
		and
		self.collision_shape.shape != null
		and
		new_shape != null
	):
		if (
			(self.collision_shape.shape.get_class() == new_shape.get_class())
		):
			self.is_tweening_collision_shape_shape = true
			self.target_collision_shape_shape = new_shape
			return
	
	if (
		self.update_shape_mode == SHAPE_UPDATE_MODE.UPDATE
		and
		self.collision_shape.shape != null
		and
		new_shape != null
	):
		if (
			(self.collision_shape.shape is RectangleShape2D)
			and
			(new_shape is RectangleShape2D)
		):
			self.collision_shape.shape.size = new_shape.size
			return
		
		if (
			(self.collision_shape.shape is CircleShape2D)
			and
			(new_shape is CircleShape2D)
		):
			self.collision_shape.shape.radius = new_shape.radius
			return
		
		if (
			(self.collision_shape.shape is CapsuleShape2D)
			and
			(new_shape is CapsuleShape2D)
		):
			self.collision_shape.shape.height = new_shape.height
			self.collision_shape.shape.radius = new_shape.radius
			return
		
		if (
			(self.collision_shape.shape is SegmentShape2D)
			and
			(new_shape is SegmentShape2D)
		):
			self.collision_shape.shape.a = new_shape.a
			self.collision_shape.shape.b = new_shape.b
			return
		
		if (
			(self.collision_shape.shape is WorldBoundaryShape2D)
			and
			(new_shape is WorldBoundaryShape2D)
		):
			self.collision_shape.shape.distance = new_shape.distance
			self.collision_shape.shape.normal = new_shape.normal
			return
		
		# If the update cannot be done, we want a duplicate of the shape
		# because we might update it later on.
		if use_deferred_calls:
			self.collision_shape.set_deferred(&\"shape\", new_shape.duplicate(true))
		else:
			self.collision_shape.shape = new_shape.duplicate(true)
		return
	
	# Or perhaps just simply REPLACE the shape.
	# This triggers (possibly unwanted) extra area_entered signals.
	if use_deferred_calls:
		self.collision_shape.set_deferred(&\"shape\", new_shape)
	else:
		self.collision_shape.shape = new_shape


# Make the shape properties go towards their target, but not by more than
# the configured interpolation step, to keep things smooth.
# This method is insanely verbose, but not very complicated.
# I did not want to use reflection for shorter code but worse perfs.
func tween_collision_shape_shape():
	if not self.is_tweening_collision_shape_shape:
		return
	
	if (
		self.collision_shape.shape == null
		or
		self.target_collision_shape_shape == null
	):
		return
	
	if (
		(self.collision_shape.shape is RectangleShape2D)
		and
		(self.target_collision_shape_shape is RectangleShape2D)
	):
		self.collision_shape.shape.size.x += clampf(
			self.target_collision_shape_shape.size.x
			-
			self.collision_shape.shape.size.x,
			-self.interpolation_step,
			self.interpolation_step,
		)
		self.collision_shape.shape.size.y += clampf(
			self.target_collision_shape_shape.size.y
			-
			self.collision_shape.shape.size.y,
			-self.interpolation_step,
			self.interpolation_step,
		)
		
		if self.collision_shape.shape.size == self.target_collision_shape_shape.size:
			self.is_tweening_collision_shape_shape = false
		
		return
	
	if (
		(self.collision_shape.shape is CircleShape2D)
		and
		(self.target_collision_shape_shape is CircleShape2D)
	):
		self.collision_shape.shape.radius += clampf(
			self.target_collision_shape_shape.radius
			-
			self.collision_shape.shape.radius,
			-self.interpolation_step,
			self.interpolation_step,
		)
		
		if self.collision_shape.shape.radius == target_collision_shape_shape.radius:
			self.is_tweening_collision_shape_shape = false
		
		return
	
	if (
		(self.collision_shape.shape is CapsuleShape2D)
		and
		(self.target_collision_shape_shape is CapsuleShape2D)
	):
		self.collision_shape.shape.height += clampf(
			self.target_collision_shape_shape.height
			-
			self.collision_shape.shape.height,
			-self.interpolation_step,
			self.interpolation_step,
		)
		self.collision_shape.shape.radius += clampf(
			self.target_collision_shape_shape.radius
			-
			self.collision_shape.shape.radius,
			-self.interpolation_step,
			self.interpolation_step,
		)
		
		if (
			self.collision_shape.shape.radius == target_collision_shape_shape.radius
			and
			self.collision_shape.shape.height == target_collision_shape_shape.height
		):
			self.is_tweening_collision_shape_shape = false
		
		return
	
	if (
		(self.collision_shape.shape is SegmentShape2D)
		and
		(self.target_collision_shape_shape is SegmentShape2D)
	):
		self.collision_shape.shape.a.x += clampf(
			self.target_collision_shape_shape.a.x
			-
			self.collision_shape.shape.a.x,
			-self.interpolation_step,
			self.interpolation_step,
		)
		self.collision_shape.shape.a.y += clampf(
			self.target_collision_shape_shape.a.y
			-
			self.collision_shape.shape.a.y,
			-self.interpolation_step,
			self.interpolation_step,
		)
		self.collision_shape.shape.b.x += clampf(
			self.target_collision_shape_shape.b.x
			-
			self.collision_shape.shape.b.x,
			-self.interpolation_step,
			self.interpolation_step,
		)
		self.collision_shape.shape.b.y += clampf(
			self.target_collision_shape_shape.b.y
			-
			self.collision_shape.shape.b.y,
			-self.interpolation_step,
			self.interpolation_step,
		)
		
		if (
			self.collision_shape.shape.a == target_collision_shape_shape.a
			and
			self.collision_shape.shape.b == target_collision_shape_shape.b
		):
			self.is_tweening_collision_shape_shape = false
		
		return
	
	# If shape types are incompatible or not supported, cancel the interpolation
	# and simply replace the shape, with a duplicate because we might update it.
	self.is_tweening_collision_shape_shape = false
	self.collision_shape.shape = target_collision_shape_shape.duplicate(true)


func tween_collision_shape_position():
	if not self.is_tweening_collision_shape_position:
		return
	
	self.collision_shape.position.x += clampf(
		self.target_collision_shape_position.x - self.collision_shape.position.x,
		-self.interpolation_step,
		self.interpolation_step,
	)
	self.collision_shape.position.y += clampf(
		self.target_collision_shape_position.y - self.collision_shape.position.y,
		-self.interpolation_step,
		self.interpolation_step,
	)
	
	if self.collision_shape.position == self.target_collision_shape_position:
		self.is_tweening_collision_shape_position = false


## We don't want to flip PhysicsBodies because it creates odd behaviors.
## Override this method if that's what you want for some reason.
func is_collision_shape_parent_flippable() -> bool:
	return (
		self.collision_shape_parent != null
		and
		not (self.collision_shape_parent is PhysicsBody2D)
	)
"

[sub_resource type="GDScript" id="GDScript_y0eov"]
script/source = "@tool
extends Resource
class_name ShapeFrames2D
#class_name Shape2DFrames

## Resource holding the configuration of a CollisionShape2D,
## for each frame of each animation of a SpriteFrames.
## This is basically a mapping of ShapeFrame2D for each (animation name, frame).


## This helps avoiding infinite loops in case you pass INF as frame index.
## If you hit that limit (what are you doing?!), it is safe to bump it up.
const MAXIMUM_FRAMES_AMOUNT := 666


## Actual data of this resource.
## This is a Dictionary of Arrays of ShapeFrame2D, indexed by animation name.
## In each Array of ShapeFrame2D, there ought to be one ShapeFrame2D per frame
## in the corresponding animation of the AnimatedSprite2D.
## It means that the shape of this should follow the shape of the SpriteFrames.
## [code]
## {
## 	'<animation name>': [ ShapeFrame2D, â€¦ ],
## 	â€¦
## }
## [/code]
@export var data := Dictionary()


## Returns the shape frame data for the provided animation and frame.
## This should return null if no data was found.
func get_shape_frame(animation_name: StringName, frame: int) -> ShapeFrame2D:
	if self.data.has(animation_name):
		var animation_data: Array = self.data[animation_name] as Array
		if animation_data == null:
			return null
		if animation_data.size() > frame:
			return animation_data[frame] as ShapeFrame2D
	return null


## Sets a ShapeFrame2D for the provided animation and frame.
## When the AnimatedSprite2D shows this frame, the CollisionShape2D will be
## configured using the provided ShapeFrame2D.  See AnimatedShape2D.
func set_shape_frame(
	animation_name: StringName,
	frame: int,
	shape_frame: ShapeFrame2D,
):
	if not self.data.has(animation_name):
		self.data[animation_name] = Array()
	var animation_data: Array = self.data[animation_name] as Array
	frame = max(frame, 0)
	frame = min(frame, MAXIMUM_FRAMES_AMOUNT)
	if animation_data.size() <= frame:
		animation_data.resize(frame + 1)
	animation_data[frame] = shape_frame


## Removes the ShapeFrame2D datum for the provided key tuple.
## This will let the frame fall back to configured defaults.
func remove_shape_frame(animation_name: StringName, frame: int):
	if not self.data.has(animation_name):
		return
	var animation_data: Array = self.data[animation_name] as Array
	if animation_data.size() > frame:
		animation_data[frame] = null


# Example of a tentative procedural API to make this.
# Prefer using the Editor for now.
#static func make_dummy() -> ShapeFrames2D:
	#var dummy := ShapeFrames2D.new()
	#dummy.data = {
		#&'jump_ascent': [
			#ShapeFrame2D.make_rectangle(Vector2(16, 32), Vector2(0, -17)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 28), Vector2(0, -15)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 22), Vector2(0, -12)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
		#],
		#&'jump_descent': [
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 22), Vector2(0, -12)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 28), Vector2(0, -15)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 32), Vector2(0, -17)),
		#],
		#&'jump_flight': [
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
			#ShapeFrame2D.make_rectangle(Vector2(16, 16), Vector2(0, -9)),
		#],
	#}
	#return dummy
"

[sub_resource type="Resource" id="Resource_314c5"]
script = SubResource("GDScript_y0eov")
data = {}

[sub_resource type="AtlasTexture" id="AtlasTexture_5wys8"]
atlas = ExtResource("1_kxudm")
region = Rect2(480, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_vvigy"]
atlas = ExtResource("1_kxudm")
region = Rect2(560, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_dl8bg"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_j52fr"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_slis1"]
atlas = ExtResource("1_kxudm")
region = Rect2(80, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_6rt4a"]
atlas = ExtResource("1_kxudm")
region = Rect2(160, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_jybco"]
atlas = ExtResource("1_kxudm")
region = Rect2(240, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_a0uwg"]
atlas = ExtResource("1_kxudm")
region = Rect2(320, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_ykp5f"]
atlas = ExtResource("1_kxudm")
region = Rect2(400, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_hu4bs"]
atlas = ExtResource("1_kxudm")
region = Rect2(480, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_vjtit"]
atlas = ExtResource("1_kxudm")
region = Rect2(560, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_j714h"]
atlas = ExtResource("1_kxudm")
region = Rect2(640, 0, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_gnfdx"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_k4jqb"]
atlas = ExtResource("1_kxudm")
region = Rect2(80, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_q12ut"]
atlas = ExtResource("1_kxudm")
region = Rect2(160, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_n8ne3"]
atlas = ExtResource("1_kxudm")
region = Rect2(240, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_7sw3e"]
atlas = ExtResource("1_kxudm")
region = Rect2(320, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_mvpmf"]
atlas = ExtResource("1_kxudm")
region = Rect2(400, 256, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_2ud3o"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_s0h4w"]
atlas = ExtResource("1_kxudm")
region = Rect2(80, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_r4tlg"]
atlas = ExtResource("1_kxudm")
region = Rect2(160, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_n3xxa"]
atlas = ExtResource("1_kxudm")
region = Rect2(240, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_sr1ip"]
atlas = ExtResource("1_kxudm")
region = Rect2(320, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_3lj7x"]
atlas = ExtResource("1_kxudm")
region = Rect2(400, 64, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_sp71y"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_81q0x"]
atlas = ExtResource("1_kxudm")
region = Rect2(80, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_vy0xx"]
atlas = ExtResource("1_kxudm")
region = Rect2(160, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_eda1j"]
atlas = ExtResource("1_kxudm")
region = Rect2(240, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_b1spw"]
atlas = ExtResource("1_kxudm")
region = Rect2(320, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_e14qh"]
atlas = ExtResource("1_kxudm")
region = Rect2(400, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_kba33"]
atlas = ExtResource("1_kxudm")
region = Rect2(480, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_57k7y"]
atlas = ExtResource("1_kxudm")
region = Rect2(560, 192, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_0j73s"]
atlas = ExtResource("1_kxudm")
region = Rect2(0, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_406w1"]
atlas = ExtResource("1_kxudm")
region = Rect2(80, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_q8mdo"]
atlas = ExtResource("1_kxudm")
region = Rect2(160, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_5q4q8"]
atlas = ExtResource("1_kxudm")
region = Rect2(240, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_2g6mx"]
atlas = ExtResource("1_kxudm")
region = Rect2(320, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_mnarn"]
atlas = ExtResource("1_kxudm")
region = Rect2(400, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_f582i"]
atlas = ExtResource("1_kxudm")
region = Rect2(480, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_k1dl7"]
atlas = ExtResource("1_kxudm")
region = Rect2(560, 128, 80, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_1bb28"]
atlas = ExtResource("1_kxudm")
region = Rect2(640, 128, 80, 64)

[sub_resource type="SpriteFrames" id="SpriteFrames_etxrd"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5wys8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vvigy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dl8bg")
}],
"loop": false,
"name": &"FinishEat",
"speed": 7.0
}, {
"frames": [{
"duration": 1.5,
"texture": SubResource("AtlasTexture_j52fr")
}, {
"duration": 10.0,
"texture": SubResource("AtlasTexture_slis1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6rt4a")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jybco")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a0uwg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ykp5f")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hu4bs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vjtit")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j714h")
}],
"loop": true,
"name": &"Idle",
"speed": 6.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_gnfdx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_k4jqb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q12ut")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n8ne3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7sw3e")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mvpmf")
}],
"loop": true,
"name": &"Run",
"speed": 9.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2ud3o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_s0h4w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_r4tlg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n3xxa")
}, {
"duration": 4.0,
"texture": SubResource("AtlasTexture_sr1ip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3lj7x")
}],
"loop": false,
"name": &"StartEat",
"speed": 7.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_sp71y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_81q0x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vy0xx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_eda1j")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_b1spw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_e14qh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kba33")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_57k7y")
}],
"loop": true,
"name": &"Trotamiento",
"speed": 9.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_0j73s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_406w1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q8mdo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5q4q8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2g6mx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mnarn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f582i")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_k1dl7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1bb28")
}],
"loop": true,
"name": &"Walk",
"speed": 8.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_7rp8v"]
size = Vector2(56, 36)

[node name="Horse" type="CharacterBody2D"]

[node name="AnimatedShape2D" type="Node" parent="." node_paths=PackedStringArray("animated_sprite", "collision_shape")]
script = SubResource("GDScript_fhyc0")
animated_sprite = NodePath("../Visuals/AnimatedSprite2D")
collision_shape = NodePath("../CollisionShape2D")
shape_frames = SubResource("Resource_314c5")
use_initial_as_fallback = null
use_previous_as_fallback = null
use_deferred_calls = null
handle_flip_h = null
interpolation_step = null
update_shape_mode = null

[node name="Visuals" type="Node2D" parent="."]

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="Visuals"]
texture_filter = 1
sprite_frames = SubResource("SpriteFrames_etxrd")
animation = &"StartEat"
frame = 5
frame_progress = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(4, 15)
shape = SubResource("RectangleShape2D_7rp8v")

[node name="MovimientoAiPrueba" type="Node" parent="." node_paths=PackedStringArray("OWNER")]
script = ExtResource("4_q8ln5")
OWNER = NodePath("..")

[node name="State Machine" type="Node" parent="." node_paths=PackedStringArray("initial_state")]
script = ExtResource("2_pf214")
initial_state = NodePath("Idle")

[node name="Idle" type="Node" parent="State Machine"]
script = ExtResource("3_y8s3n")

[node name="Walk" type="Node" parent="State Machine"]
script = ExtResource("4_ypgp0")

[node name="Run" type="Node" parent="State Machine"]
script = ExtResource("5_2ue6p")
